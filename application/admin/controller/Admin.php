<?php
/**
 * Created by PhpStorm.
 * User: 25754
 * Date: 2020/3/11
 * Time: 16:21
 */

namespace app\admin\controller;

use app\admin\model\Admin as AdminModel;
use app\admin\model\Role as RoleModel;

class Admin extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        return $this->fetch();
    }

    public function info()
    {
        return $this->fetch();
    }

    public function edit()
    {
        if ($this->request->method(true) == 'POST') {
            $post = $this->request->post("post/a");
            $admin = AdminModel::get($post['id']);
            if ($post['password']) {
                //要求修改密码
                $salt = random(5);
                $admin->salt = $salt;
                $admin->password = md5(md5($post['password']) . $salt);
            }
            $admin->role_id = $post['role_id'];
            $admin->username = $post['username'];
            $admin->status = $post['status'];
            $admin->save();
            $this->redirect(url('admin/index'));
        }
        $adminModel = new AdminModel();
        $roleModel = new RoleModel();
        $role = $roleModel->getRole();
        $data = $adminModel->getAdmin($this->request->get("id"));
        $this->assign("role", $role);
        $this->assign("info", $data);
        return $this->fetch();
    }

    public function add()
    {
        if ($this->request->method(true) == 'POST') {
            $post = $this->request->post("post/a");
            if ($post['password'] != $post['rpassword']) {
                $this->error("两次输入密码不一致");
            }
            unset($post['rpassword']);
            $adminModel = new AdminModel();
            $post['date_entered'] = date("Y-m-d H:i:s", time());
            $post['salt'] = random(5);
            $post['password'] = md5(md5($post['password']) . $post['salt']);
            if ($adminModel->addAdmin($post)) {
                $this->redirect(url('admin/index'));
                return false;
            }
            $this->error("添加管理员失败");
        }
        $roleModel = new RoleModel();
        $role = $roleModel->getRole();
        $this->assign("role", $role);
        return $this->fetch();
    }

    public function lst()
    {
        $page = $this->request->get("page");
        $limit = $this->request->get("limit");
        $offset = ($page - 1) * $limit;
        $adminModel = new AdminModel();
        $data = $adminModel->getAdminList($offset, $limit);
        $count = $adminModel->getAdminListCount();
        return result($data, 0, '获取成功', $count);
    }

    public function check($name)
    {
        $adminModel = new AdminModel();
        if ($adminModel->checkUserName($name)) {
            return result(array(), 1, "用户名已经存在");
        }
        return result(array(), 0);
    }

    public function delete_op()
    {
        $id = $this->request->get('id');
        $id_array = explode(",", $id);
        if (in_array(1, $id_array)) {
            return result(array(), 1, "后台管理员admin不能被删除");
        }
        $adminModel = new AdminModel();
        if ($adminModel->deleteAdmin($id)) {
            return result(array(), 200, "删除管理员成功");
        }
        return result(array(), -1, "删除管理员失败");
    }
}