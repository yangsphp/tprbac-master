<?php
/**
 * Created by PhpStorm.
 * User: 25754
 * Date: 2020/3/11
 * Time: 16:21
 */

namespace app\admin\controller;

use think\Config;
use think\Db;
use think\Session;
use app\admin\model\BackUp;

class Database extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        return $this->fetch();
    }

    public function lst()
    {
        $tables = $T = array();
        $i = $total_size = 0;
        $database = Config::get("database")['database'];
        $data = Db::query("show tables from $database");
        foreach ($data as $k => $v)
        {
            $T[] = $v['Tables_in_' . $database];
        }
        uksort($T, 'strnatcasecmp');
        foreach ($T as $t) {
            $r = Db::query("show table status from $database like '$t'");
            $r = $r[0];
            $tables[$i]['name'] = $r['Name'];
            $tables[$i]['rows'] = $r['Rows'];
            $tables[$i]['size'] = round($r['Data_length'] / 1024 / 1024, 2);
            $tables[$i]['index'] = round($r['Index_length'] / 1024 / 1024, 2);
            $tables[$i]['tsize'] = $tables[$i]['size'] + $tables[$i]['index'];
            $tables[$i]['auto'] = $r['Auto_increment'];
            $tables[$i]['update_time'] = $r['Update_time'];
            $tables[$i]['note'] = $r['Comment'];
            $tables[$i]['chip'] = $r['Data_free'];
            $total_size += $r['Data_length'] + $r['Index_length'];
            $i++;
        }
        return result($tables, 0, "获取成功", count($tables));
    }

    public function backup() {
        $page = $this->request->get("page");
        $limit = $this->request->get("limit");
        $offset = ($page - 1) * $limit;
        $back = new BackUp();
        $data = $back->getBackUpList($offset, $limit);
        $count = $back->getBackUpListCount();
        return result($data, 0, "获取成功", $count);
    }

    public function back_op()
    {
        $tables = explode(",", $this->request->get("tables"));
        $sql = "";
        foreach ($tables as $k => $table) {
            //获取数据
            $data = Db::query("select * from " . $table);
            //获取表字段
            $fields_info = Db::query("desc " . $table);
            $field_str = "";
            foreach ($fields_info as $ks => $vs) {
                $field_str .= "`" . $vs['Field'] . "`,";
            }
            $sql = $sql . "-- --------------------\r\n";
            $sql = $sql . "-- Records of " . $table . "\r\n";
            $sql = $sql . "-- --------------------\r\n";
            foreach ($data as $ks => $vs) {
                $rr = implode("','", array_values($vs));
                $sql .= "insert into `" . $table . "` (" . trim($field_str, ",") . ") values ('" . $rr . "');\r\n";
            }
        }
        $filename = date('YmdHis') . '.sql';
        $path = '/upload/db/' . $filename;
        @file_put_contents(ROOT_PATH . $path, $sql);
        $date = date('Y-m-d H:i:s');
        $file_size = sprintf("%.2f", filesize(ROOT_PATH . $path) / 1024);
        if ($file_size / 1024 > 1) {
            $file_size = ceil($file_size / 1024) . "MB";
        } else {
            $file_size = $file_size . "KB";
        }
        $user = Session::get("user");
        $insert = array(
            'user_id' => $user['id'],
            'name' => $filename,
            'table' => implode(",", $tables),
            'path' => $path,
            'size' => $file_size,
            'date_entered' => $date
        );
        $back = new BackUp();
        if ($back->insertBackUp($insert)) {
            return result(array(), 200, "备份表成功");
        }
        return result(array(), -1, "备份表失败");
    }

    public function repair($table)
    {
        Db::query("REPAIR TABLE `$table`");
        return result(array(), 200, "修复成功");
    }

    public function optimize($table)
    {
        Db::query("OPTIMIZE TABLE `$table`");
        return result(array(), 200, "优化成功");
    }

    public function dict($table)
    {
        //获取表字段信息
        $columns = array();
        $database = Config::get("database")['database'];
        $res = Db::query("SHOW COLUMNS FROM $table");
        foreach ($res as $r) {
            //获取字段注释
            $column = Db::query("select COLUMN_COMMENT as comment from INFORMATION_SCHEMA.COLUMNS where table_name = '{$table}' and column_name = '{$r['Field']}' and table_schema = '$database'");
            $r['comment'] = $column[0]['comment'];
            if ($r['Key'] == 'PRI')
            {
                $r['Type'] = $r['Type']." auto_increment";
            }
            $columns[] = $r;
        }
        $this->assign("data", $columns);
        $this->assign("table", $table);
        return $this->fetch();
    }

    public function dict_op($table, $Field, $Type)
    {
        $table = $this->request->post("table");
        $field = $this->request->post("Field/a");
        $type = $this->request->post("Type/a");
        foreach ($field as $column => $v) {
            $column_type = $type[$column];
            Db::query("alter table $table modify column {$column} {$column_type} comment '{$v}'");
        }
        $this->redirect(url("database/index"));
    }

    public function delback_op($id)
    {
        $back = new BackUp();
        $backInfo = $back->getBackUpById($id);
        if ($back->deleteBackUp($id)) {
            @unlink(ROOT_PATH . $backInfo['path']);
            return result(array(), 200, "删除成功");
        }
        return result(array(), -1, "删除失败");
    }

    public function callback_op($id)
    {
        $back = new BackUp();
        $backInfo = $back->getBackUpById($id);
        $tables = explode(",", $backInfo['table']);
        $content = file_get_contents(ROOT_PATH.$backInfo['path']);
        if ($content) {
            $sql_array = explode("\r\n", $content);
            foreach ($tables as $k => $v) {
                Db::query("truncate {$v}");
            }
            foreach ($sql_array as $k => $v) {
                if (strpos($v, "--") === false && $v) {
                    Db::query($v);
                }
            }
            return result(array(), 200, "还原成功");
        }
        return result(array(), -1, "还原失败");
    }
}